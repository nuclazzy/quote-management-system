{
  "master": {
    "tasks": [
      {
        "id": 17,
        "title": "데이터 불변성 (Snapshot) 원칙 검증",
        "description": "견적서 생성 시 마스터 데이터의 스냅샷이 저장되어, 이후 마스터 데이터가 변경되어도 과거 견적서에 영향을 주지 않는 핵심 원칙을 검증합니다. 이는 시스템 데이터 무결성의 최우선 검증 과제입니다.",
        "details": "Supabase 데이터베이스에서 견적서 관련 테이블과 품목 테이블의 구조를 직접 확인합니다. 견적서에 품목 추가 시, 마스터 품목의 현재 데이터를 복사하여 별도 저장하는 로직을 검증해야 합니다. 단순 Foreign Key 참조가 아닌, 값 자체를 복사하는지 확인이 필요합니다.",
        "testStrategy": "1. 마스터 품목 A(가격: 100원)를 생성합니다. 2. 이 품목 A를 포함하는 견적서 B를 생성 및 저장합니다. 3. 마스터 품목 A의 가격을 200원으로 수정합니다. 4. 저장된 견적서 B를 다시 열었을 때, 품목 A의 가격이 여전히 100원으로 표시되는지 확인합니다. 5. 데이터베이스에서 견적서 B에 연결된 품목 데이터가 '100원'으로 저장되어 있는지 직접 확인합니다.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "핵심 계산 로직 정확성 검증 (수수료, 할인, VAT, 수익률)",
        "description": "견적서의 핵심 기능인 금액 계산 로직의 정확성을 종합적으로 검증합니다. 그룹별/항목별 대행수수료, 할인 금액, 부가세(포함/별도), 원가 기반 실시간 수익률 계산이 모두 포함됩니다.",
        "details": "다양한 시나리오를 포함하는 테스트 케이스 매트릭스를 작성합니다. Next.js 프론트엔드에서 상태 관리 및 계산 로직이 포함된 TypeScript 코드를 검토하고, 필요시 브라우저 개발자 도구를 사용하여 중간 계산 값을 확인합니다.",
        "testStrategy": "1. 0원, 소수점, 큰 금액 등 경계값을 입력하여 계산 오류 여부를 확인합니다. 2. 특정 그룹/항목에만 수수료를 적용/미적용하고 결과가 올바른지 검증합니다. 3. 할인 금액 적용 후, VAT 계산(포함/별도)이 정확한지 확인합니다. 4. 각 항목의 원가를 입력하고, UI에 표시되는 실시간 수익률이 예상 값과 일치하는지 검증합니다. 모든 결과를 수동 계산과 비교합니다.",
        "priority": "high",
        "dependencies": [
          17
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "사용자 인증 및 역할 기반 권한(RBAC) 검증",
        "description": "Google OAuth를 통한 사용자 인증, 지정된 도메인(@motionsense.co.kr) 제한, 그리고 super_admin/admin/member 역할에 따른 기능 접근 제어가 올바르게 작동하는지 검증합니다.",
        "details": "Supabase의 Auth 기능과 RLS(Row Level Security) 정책을 중점적으로 테스트합니다. 각 역할에 해당하는 테스트용 Google 계정을 사용하여 로그인 후, 접근 권한을 확인합니다.",
        "testStrategy": "1. 허용되지 않은 도메인의 Google 계정으로 로그인 시도를 하고, 실패하는지 확인합니다. 2. 'member' 역할로 로그인하여 관리자 기능(예: 사용자 관리, 마스터 품목 관리) 접근 시 차단되는지 확인합니다. 3. 'admin' 역할로 로그인하여 사용자 관리를 제외한 모든 기능이 사용 가능한지 확인합니다. 4. RLS 정책에 따라 'member'가 자신의 견적서만 조회/수정할 수 있는지 확인합니다.",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "견적서 작성/수정 워크플로우 및 UI/UX 검증",
        "description": "사용자가 견적서를 생성하고 수정하는 전체 과정(그룹 > 품목 > 세부내용)의 흐름을 검토하고, 평면적 디자인 시스템의 일관성 및 사용 편의성을 평가합니다.",
        "details": "Material-UI 컴포넌트의 일관된 사용 여부와 사용자 인터랙션(추가, 삭제, 수정, 순서 변경)의 직관성을 평가합니다. PRD에 명시된 '세부 항목 기본 펼침', '품목명 입력 필드 너비 확보' 등 구체적인 UX 개선 사항을 확인합니다.",
        "testStrategy": "1. 여러 그룹과 다수의 품목을 포함하는 복잡한 견적서를 처음부터 끝까지 작성해봅니다. 2. 품목 추가 시 세부 내용이 기본적으로 펼쳐져 있는지 확인합니다. 3. 긴 품목명을 입력했을 때 잘리지 않고 충분히 보이는지 확인합니다. 4. 드래그 앤 드롭과 같은 편의 기능이 있다면 부드럽게 동작하는지 테스트합니다.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "반응형 레이아웃 및 모바일 환경 테스트",
        "description": "데스크톱, 태블릿, 모바일 등 다양한 화면 크기에서 UI가 깨짐 없이 정상적으로 표시되는지, 특히 카드 레이아웃이 작은 화면에서 효과적으로 동작하는지 검증합니다.",
        "details": "브라우저 개발자 도구의 'Responsive Design Mode'를 사용하여 다양한 해상도를 시뮬레이션합니다. 실제 모바일 기기에서의 테스트를 병행하여 터치 인터랙션의 정확성을 확인합니다.",
        "testStrategy": "1. 화면 너비를 줄여가며 각 컴포넌트(헤더, 카드, 버튼 등)가 적절히 재배치되는지 확인합니다. 2. 모바일 뷰에서 견적서 품목이 많아졌을 때, 테이블 스크롤 문제가 해결되었는지(예: 가로 스크롤 가능) 집중적으로 테스트합니다. 3. 모바일에서 모든 버튼과 입력 필드가 쉽게 터치 가능한지 확인합니다.",
        "priority": "high",
        "dependencies": [
          20
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "PDF 생성 및 다운로드 기능 검증",
        "description": "견적서 데이터를 기반으로 PDF 파일을 생성하고 다운로드하는 기능이 완벽하게 동작하는지 확인합니다. 생성된 PDF의 내용과 포맷이 UI와 정확히 일치해야 합니다.",
        "details": "Next.js 백엔드 또는 프론트엔드에서 사용되는 PDF 생성 라이브러리의 동작을 확인합니다. 한글, 특수문자, 긴 텍스트, 다중 페이지 등 다양한 케이스를 테스트합니다.",
        "testStrategy": "1. 간단한 견적서와 매우 복잡한(다중 페이지) 견적서를 각각 PDF로 생성합니다. 2. 생성된 PDF 파일의 레이아웃, 폰트, 이미지(로고 등)가 깨지지 않는지 확인합니다. 3. PDF 내부의 모든 텍스트와 숫자가 UI의 데이터와 100% 일치하는지 비교 검증합니다. 4. 여러 브라우저(Chrome, Safari, Firefox)에서 다운로드 기능이 정상 작동하는지 확인합니다.",
        "priority": "high",
        "dependencies": [
          18
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "마스터 품목 및 템플릿 시스템 검증",
        "description": "자주 사용하는 품목을 관리하는 '마스터 품목 시스템'과 견적서 양식을 재사용하는 '템플릿 기능'의 완전성을 검증합니다.",
        "details": "마스터 품목에 대한 CRUD(생성, 읽기, 업데이트, 삭제) 기능과 템플릿 생성/적용 플로우를 테스트합니다. 템플릿 적용 시 데이터가 올바르게 복사되는지 확인합니다.",
        "testStrategy": "1. 여러 개의 마스터 품목을 생성, 수정, 삭제하고 변경 사항이 즉시 반영되는지 확인합니다. 2. 특정 견적서를 템플릿으로 저장합니다. 3. 새 견적서 작성 시 저장된 템플릿을 불러와 모든 데이터(품목, 가격, 수수료 설정 등)가 정확히 복제되는지 확인합니다. 4. 템플릿을 수정한 후, 이전에 해당 템플릿으로 만들었던 견적서가 영향을 받지 않는지 확인합니다(스냅샷 원칙 연계).",
        "priority": "medium",
        "dependencies": [
          17
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "자동 임시저장 및 페이지 이탈 방지 기능 검증",
        "description": "사용자가 실수로 작업 내용을 잃지 않도록 하는 자동 임시저장 기능과, 저장되지 않은 변경사항이 있을 경우 페이지 이탈을 방지하는 경고창 기능의 안정성을 테스트합니다.",
        "details": "브라우저의 LocalStorage 또는 SessionStorage를 확인하여 임시 데이터가 저장되는지 검증합니다. 브라우저의 `beforeunload` 이벤트 리스너 동작을 확인합니다.",
        "testStrategy": "1. 견적서 작성 중 일부 내용을 입력하고 저장하지 않은 채 페이지를 새로고침합니다. 데이터가 복원되는지 확인합니다. 2. 내용을 수정한 뒤, 브라우저 탭을 닫거나 다른 사이트로 이동을 시도합니다. '변경사항이 저장되지 않았습니다' 경고창이 뜨는지 확인합니다. 3. 경고창에서 '이탈'을 선택하면 변경사항이 사라지고, '머무르기'를 선택하면 편집 상태가 유지되는지 확인합니다.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "시스템 안정성 및 예외 처리 검증",
        "description": "네트워크 오류, 잘못된 데이터 입력 등 예외적인 상황에서 시스템이 비정상 종료되지 않고, 사용자에게 명확한 피드백을 제공하며 안정적으로 동작하는지 검증합니다.",
        "details": "브라우저 개발자 도구의 네트워크 탭에서 '오프라인' 모드를 활성화하여 API 요청 실패 상황을 시뮬레이션합니다. 폼에 의도적으로 유효하지 않은 데이터를 입력하여 유효성 검사 로직을 테스트합니다.",
        "testStrategy": "1. 데이터 저장 중 네트워크 연결을 강제로 끊고, '저장에 실패했습니다'와 같은 사용자 친화적인 오류 메시지가 표시되는지 확인합니다. 2. 숫자만 입력해야 하는 필드에 문자를 입력하는 등 유효성 규칙을 위반했을 때 적절한 경고가 표시되는지 확인합니다. 3. Vercel 및 브라우저 콘솔에 예기치 않은(unhandled) 에러 로그가 남지 않는지 모니터링합니다.",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 26,
        "title": "성능 및 최적화 검토",
        "description": "애플리케이션의 전반적인 성능을 측정하고 최적화 영역을 식별합니다. 페이지 로딩 속도, 대용량 데이터 처리 시의 응답성, 네트워크 요청 효율성 등을 평가합니다.",
        "details": "Google Lighthouse, Chrome DevTools의 Performance, Network 탭을 사용하여 성능을 측정합니다. 특히 수십 개 이상의 품목을 포함하는 대용량 견적서를 다룰 때의 프론트엔드 렌더링 성능을 중점적으로 확인합니다.",
        "testStrategy": "1. 주요 페이지(대시보드, 견적서 목록, 견적서 작성)에 대해 Lighthouse 점수를 측정하고, 개선점을 파악합니다. 2. 견적서에 50개 이상의 품목을 추가하고, 스크롤, 입력, 수정 시 UI 지연(lag)이 발생하는지 체감 테스트를 진행합니다. 3. Network 탭을 분석하여 불필요하거나 중복되는 API 호출이 없는지, 이미지 등 에셋이 최적화되었는지 확인합니다.",
        "priority": "medium",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 27,
        "title": "최종 품질 검토 보고서 및 이슈 목록 작성",
        "description": "지금까지 수행한 모든 검증(17~26) 결과를 종합하여 '종합 품질 검토 보고서'와 '발견된 이슈 및 개선사항 목록'을 작성합니다. 이슈는 우선순위에 따라 정리하여 수정 계획을 수립합니다.",
        "details": "문서화 도구(Notion, Google Docs 등)를 사용하여 보고서를 작성하고, 이슈 관리 도구(Jira, Trello, GitHub Issues)에 발견된 버그와 개선사항을 등록합니다. 각 이슈에는 재현 단계, 기대 결과, 실제 결과, 심각도 등을 명시합니다.",
        "testStrategy": "1. 모든 테스트 태스크의 결과물을 취합합니다. 2. PRD의 '품질 기준 및 성공 기준'에 부합하는지 최종 평가합니다. 3. 발견된 모든 이슈를 심각도(Critical, High, Medium, Low)와 수정 우선순위에 따라 분류하여 목록을 만듭니다. 4. 종합적인 시스템 상태와 배포 가능 여부에 대한 의견을 포함한 최종 보고서를 완성합니다.",
        "priority": "low",
        "dependencies": [
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 28,
        "title": "확장성 및 미래 개선사항 검토",
        "description": "현재 구현된 시스템의 구조를 검토하여 향후 기능 확장(고급 필터링, 리포팅, 다국어 지원 등)에 용이한지 평가하고, 관련 개선사항을 제안합니다.",
        "details": "Next.js App Router 구조, Supabase 스키마, 컴포넌트 설계 등을 코드 레벨에서 검토합니다. PRD의 '추가 요구사항(Could Have)'을 기준으로 확장성을 평가합니다.",
        "testStrategy": "1. '상세 분석 및 리포팅' 기능을 추가한다고 가정했을 때, 현재 데이터베이스 스키마가 적절한지 검토합니다. 2. UI 텍스트를 다국어 지원으로 전환할 경우, 코드 변경이 얼마나 필요한지(하드코딩된 문자열이 많은지 등) 평가합니다. 3. 검토 결과를 바탕으로 미래 기술 부채를 줄이기 위한 리팩토링 제안 목록을 작성합니다.",
        "priority": "low",
        "dependencies": [
          27
        ],
        "status": "done",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-29T05:22:49.131Z",
      "updated": "2025-08-01T22:49:18.233Z",
      "description": "Tasks for master context"
    }
  }
}