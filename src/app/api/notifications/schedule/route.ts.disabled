import { NextRequest, NextResponse } from 'next/server'
import { NotificationService } from '@/lib/services/notification-service'

// POST /api/notifications/schedule - Run scheduled notification checks
export async function POST(request: NextRequest) {
  try {
    // Verify this is an authorized request (you might want to add API key verification)
    const authHeader = request.headers.get('authorization')
    const expectedToken = process.env.CRON_SECRET || 'your-secret-token'
    
    if (!authHeader || authHeader !== `Bearer ${expectedToken}`) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const results = {
      quotesExpiring: 0,
      projectsDeadlineApproaching: 0,
      settlementsDue: 0,
      settlementsOverdue: 0,
      errors: [] as string[]
    }

    // Check for expiring quotes
    try {
      await NotificationService.notifyQuoteExpiring()
      results.quotesExpiring++
    } catch (error) {
      console.error('Error checking expiring quotes:', error)
      results.errors.push('Failed to check expiring quotes')
    }

    // Check for project deadlines approaching
    try {
      await NotificationService.notifyProjectDeadlineApproaching()
      results.projectsDeadlineApproaching++
    } catch (error) {
      console.error('Error checking project deadlines:', error)
      results.errors.push('Failed to check project deadlines')
    }

    // Check for settlements due
    try {
      await NotificationService.notifySettlementDue()
      results.settlementsDue++
    } catch (error) {
      console.error('Error checking settlements due:', error)
      results.errors.push('Failed to check settlements due')
    }

    // Check for overdue settlements
    try {
      await NotificationService.notifySettlementOverdue()
      results.settlementsOverdue++
    } catch (error) {
      console.error('Error checking overdue settlements:', error)
      results.errors.push('Failed to check overdue settlements')
    }

    return NextResponse.json({
      success: true,
      message: 'Scheduled notification checks completed',
      results
    })

  } catch (error) {
    console.error('Error in scheduled notifications:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

// GET /api/notifications/schedule - Get schedule status (for monitoring)
export async function GET() {
  return NextResponse.json({
    status: 'active',
    description: 'Notification scheduling endpoint',
    supportedChecks: [
      'quotes_expiring',
      'project_deadlines',
      'settlements_due',
      'settlements_overdue'
    ],
    recommendedFrequency: 'daily'
  })
}