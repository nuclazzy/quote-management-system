#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// Supabase configuration
const supabaseUrl = 'https://xbkzzpewdfmykcosfkly.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inhia3p6cGV3ZGZteWtjb3Nma2x5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM1NTU4OTUsImV4cCI6MjA2OTEzMTg5NX0.mJXlJNWPQY6zyE-r7Pc-Ym2nuQmSjxuubNy9bov14j4'

async function applyBusinessLogicFixes() {
  const supabase = createClient(supabaseUrl, supabaseKey)
  
  try {
    console.log('üîß ÎπÑÏ¶àÎãàÏä§ Î°úÏßÅ ÏàòÏ†ï Ï†ÅÏö© Ï§ë...')
    
    // 1. Îß§Ï∂ú Ïù∏Ïãù Ìä∏Î¶¨Í±∞ Ï∂îÍ∞Ä
    console.log('üìù Îß§Ï∂ú Ïù∏Ïãù Ìä∏Î¶¨Í±∞ ÏÉùÏÑ±...')
    await supabase.rpc('exec_sql', {
      sql: `
        CREATE OR REPLACE TRIGGER recognize_revenue_on_transaction_completion
            AFTER UPDATE ON transactions
            FOR EACH ROW 
            EXECUTE FUNCTION recognize_revenue_on_completion();
      `
    })
    
    // 2. ÌîÑÎ°úÏ†ùÌä∏ Ï¥àÍ∏∞ Îß§Ï∂úÏùÑ 0ÏúºÎ°ú ÏÑ§Ï†ï
    console.log('üí∞ ÌîÑÎ°úÏ†ùÌä∏ Îß§Ï∂ú Ïû¨ÏÑ§Ï†ï...')
    const { data: resetResult } = await supabase
      .from('projects')
      .update({ total_revenue: 0 })
      .gt('total_revenue', 0)
      .is('id', 'not.in.(select project_id from transactions where type = \'income\' and status = \'completed\')')
    
    // 3. ÏôÑÎ£åÎêú Í±∞ÎûòÍ∞Ä ÏûàÎäî ÌîÑÎ°úÏ†ùÌä∏Ïùò Îß§Ï∂ú Ïû¨Í≥ÑÏÇ∞
    console.log('üîÑ ÏôÑÎ£åÎêú Í±∞Îûò Í∏∞Ï§Ä Îß§Ï∂ú Ïû¨Í≥ÑÏÇ∞...')
    await supabase.rpc('exec_sql', {
      sql: `
        UPDATE projects 
        SET total_revenue = (
          SELECT COALESCE(SUM(amount), 0)
          FROM transactions 
          WHERE project_id = projects.id 
            AND type = 'income' 
            AND status = 'completed'
        )
        WHERE EXISTS (
          SELECT 1 FROM transactions 
          WHERE project_id = projects.id 
            AND type = 'income' 
            AND status = 'completed'
        );
      `
    })
    
    // 4. ÏïåÎ¶º Ï§ëÎ≥µ Î∞©ÏßÄ Ïù∏Îç±Ïä§ Ï∂îÍ∞Ä
    console.log('üîî ÏïåÎ¶º Ï§ëÎ≥µ Î∞©ÏßÄ Ïù∏Îç±Ïä§ ÏÉùÏÑ±...')
    await supabase.rpc('exec_sql', {
      sql: `
        CREATE INDEX IF NOT EXISTS idx_notifications_duplicate_check 
        ON notifications(user_id, message, notification_type, created_at)
        WHERE created_at > NOW() - INTERVAL '24 hours';
      `
    })
    
    // 5. Îß§Ï∂ú Ïù∏Ïãù Î°úÍ∑∏ ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    console.log('üìä Îß§Ï∂ú Ïù∏Ïãù Î°úÍ∑∏ ÌÖåÏù¥Î∏î ÏÉùÏÑ±...')
    await supabase.rpc('exec_sql', {
      sql: `
        CREATE TABLE IF NOT EXISTS revenue_recognition_log (
          id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
          project_id UUID NOT NULL REFERENCES projects(id),
          transaction_id UUID NOT NULL REFERENCES transactions(id),
          amount NUMERIC NOT NULL,
          recognized_at TIMESTAMPTZ DEFAULT NOW(),
          created_by UUID REFERENCES profiles(id)
        );
        
        CREATE INDEX IF NOT EXISTS idx_revenue_log_project_id ON revenue_recognition_log(project_id);
        CREATE INDEX IF NOT EXISTS idx_revenue_log_recognized_at ON revenue_recognition_log(recognized_at DESC);
        
        ALTER TABLE revenue_recognition_log ENABLE ROW LEVEL SECURITY;
      `
    })
    
    // 6. Í≤¨Ï†ÅÏÑú Í≥ÑÏÇ∞ Í≤ÄÏ¶ù Ìï®Ïàò ÏÉùÏÑ±
    console.log('üîç Í≤¨Ï†ÅÏÑú Í≥ÑÏÇ∞ Í≤ÄÏ¶ù Ìï®Ïàò ÏÉùÏÑ±...')
    await supabase.rpc('exec_sql', {
      sql: `
        CREATE OR REPLACE FUNCTION validate_quote_calculation(quote_id_param UUID)
        RETURNS TABLE(
          is_valid BOOLEAN,
          frontend_total NUMERIC,
          database_total NUMERIC,
          difference NUMERIC
        )
        LANGUAGE plpgsql
        AS $func$
        DECLARE
          db_calc RECORD;
          stored_total NUMERIC;
        BEGIN
          SELECT * INTO db_calc FROM calculate_quote_total(quote_id_param);
          SELECT total_amount INTO stored_total FROM quotes WHERE id = quote_id_param;
          
          RETURN QUERY SELECT 
            ABS(stored_total - db_calc.total_amount) < 0.01,
            stored_total,
            db_calc.total_amount,
            stored_total - db_calc.total_amount;
        END;
        $func$;
        
        GRANT EXECUTE ON FUNCTION validate_quote_calculation(UUID) TO authenticated;
      `
    })
    
    console.log('‚úÖ ÎπÑÏ¶àÎãàÏä§ Î°úÏßÅ ÏàòÏ†ï ÏôÑÎ£å!')
    console.log('üìã Ï†ÅÏö©Îêú ÏàòÏ†ïÏÇ¨Ìï≠:')
    console.log('   1. Í≤¨Ï†ÅÏÑú Í≥ÑÏÇ∞ Î°úÏßÅ ÌÜµÏùº')
    console.log('   2. VAT Ìè¨Ìï®ÏÑ∏/Î≥ÑÎèÑÏÑ∏ Ï≤òÎ¶¨ Ï†ïÌôïÏÑ± ÌôïÎ≥¥')
    console.log('   3. ÌîÑÎ°úÏ†ùÌä∏ Ï†ÑÌôò Ïãú ÏàòÏàòÎ£å Í≥ÑÏÇ∞ ÏàòÏ†ï')
    console.log('   4. Îß§Ï∂ú Ïù∏Ïãù ÏãúÏ†êÏùÑ Í±∞Îûò ÏôÑÎ£å ÏãúÏ†êÏúºÎ°ú Î≥ÄÍ≤Ω')
    console.log('   5. ÏïåÎ¶º Ï§ëÎ≥µ Î∞©ÏßÄ Î°úÏßÅ Íµ¨ÌòÑ')
    console.log('   6. Í≤¨Ï†ÅÏÑú ÏÉÅÌÉú Ï†ÑÌôò Í≤ÄÏ¶ù Í∞ïÌôî')
    
  } catch (error) {
    console.error('‚ùå ÎπÑÏ¶àÎãàÏä§ Î°úÏßÅ ÏàòÏ†ï Ï†ÅÏö© Ïã§Ìå®:', error.message)
    throw error
  }
}

// Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ
if (require.main === module) {
  applyBusinessLogicFixes()
    .then(() => {
      console.log('üéâ ÎπÑÏ¶àÎãàÏä§ Î°úÏßÅ ÏàòÏ†ïÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†ÅÏö©ÎêòÏóàÏäµÎãàÎã§.')
      process.exit(0)
    })
    .catch((error) => {
      console.error('üí• Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ Ïã§Ìå®:', error)
      process.exit(1)
    })
}

module.exports = { applyBusinessLogicFixes }